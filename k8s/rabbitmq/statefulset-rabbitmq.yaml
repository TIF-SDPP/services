# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: rabbitmq
# spec:
#   serviceName: rabbitmq
#   replicas: 2  # Tres r√©plicas para HA
#   selector:
#     matchLabels:
#       app: rabbitmq
#   template:
#     metadata:
#       labels:
#         app: rabbitmq
#     spec:
#       containers:
#       - name: rabbitmq
#         image: rabbitmq:3-management
#         env:
#         - name: RABBITMQ_ERLANG_COOKIE
#           value: "my_secret_cookie"
#         - name: RABBITMQ_USE_LONGNAME
#           value: "true"
#         - name: RABBITMQ_NODENAME
#           value: "rabbit@$(MY_POD_NAME).rabbitmq.default.svc.cluster.local"
#         - name: MY_POD_NAME
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.name
#         command: ["/bin/sh", "-c"]
#         args:
#           - export RABBITMQ_NODENAME="rabbit@$(MY_POD_NAME).rabbitmq.default.svc.cluster.local"; 
#             exec docker-entrypoint.sh rabbitmq-server
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "100m"
#           limits:
#             memory: "2Gi"
#             cpu: "1000m"
#         ports:
#         - containerPort: 5672
#         - containerPort: 15672
#         volumeMounts:
#         - name: rabbitmq-storage
#           mountPath: /var/lib/rabbitmq
#       tolerations:
#       - key: "instance_type"
#         operator: "Equal"
#         value: "spot"
#         effect: "NoSchedule"
#   volumeClaimTemplates:
#   - metadata:
#       name: rabbitmq-storage
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       resources:
#         requests:
#           storage: 1Gi

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 2
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              value: "my_secret_cookie"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command: ["/bin/sh", "-c"]
          args:
            - |
              HOSTNAME=$(hostname)
              NODE_NAME="rabbit@${HOSTNAME}.rabbitmq.default.svc.cluster.local"
              export RABBITMQ_NODENAME=$NODE_NAME
              
              if [ "$HOSTNAME" = "rabbitmq-0" ]; then
                echo "Starting primary RabbitMQ node ($NODE_NAME)..."
                exec docker-entrypoint.sh rabbitmq-server
              else
                echo "Starting and joining cluster as replica ($NODE_NAME)..."
                docker-entrypoint.sh rabbitmq-server -detached

                echo "Waiting for RabbitMQ to start..."
                sleep 10

                rabbitmqctl stop_app
                rabbitmqctl join_cluster rabbit@rabbitmq-0.rabbitmq.default.svc.cluster.local
                rabbitmqctl start_app

                echo "Setting HA policy to replicate all queues"
                rabbitmqctl set_policy ha-all "^" '{"ha-mode":"all"}' --priority 1 --apply-to queues

                tail -f /var/log/rabbitmq/*  # Keeps the container running
              fi
          ports:
            - containerPort: 5672
            - containerPort: 15672
          volumeMounts:
            - name: rabbitmq-storage
              mountPath: /var/lib/rabbitmq
      tolerations:
        - key: "instance_type"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi